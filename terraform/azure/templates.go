// Code generated by go-bindata.
// sources:
// templates/network.tf
// templates/network_security_group.tf
// templates/output.tf
// templates/resource_group.tf
// templates/storage.tf
// templates/tls.tf
// templates/vars.tf
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesNetworkTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcb\x4e\xc5\x20\x10\x40\xf7\x7c\xc5\x64\xe2\xb6\x68\x37\xee\xfc\x12\x63\x08\x6d\x47\x25\xb6\xd0\x0c\x0f\x8d\x0d\xff\x6e\x68\x52\xb5\xdc\x36\xf7\xc2\x92\xc3\xe4\x9c\x0c\x93\x77\x91\x7b\x02\xd4\xdf\x91\x89\x27\x95\x0c\x87\xa8\x47\x65\x29\x7c\x3a\xfe\x40\xc0\xce\xf9\x77\x84\x45\x00\x58\x3d\x11\x54\xe7\x09\xf0\x6e\x49\x9a\x25\xd9\xa4\xcc\x90\x9b\x82\x37\xc9\xa2\x00\xd0\xc3\xc0\xe4\xbd\xf2\xb3\xee\xe9\x97\x7f\xc6\xf6\x41\xae\xf7\xbe\x7d\xc4\x17\x01\x30\xba\x5e\x07\xe3\xec\xe1\xdc\xed\x31\x97\x89\x9b\xaf\x7a\x63\x17\x67\xb5\x0a\xad\xe4\xa6\xbf\x07\x64\x91\x91\x85\xca\x28\xb2\x10\x97\xb9\x3e\x76\x96\xc2\xd5\xca\x93\x4c\xbf\xcb\x9c\x99\x5e\xcd\xd7\xdf\x87\xff\x99\x27\xee\x37\xcb\x03\x54\x8b\x39\x68\xaf\x88\x2a\xfe\x27\x00\x00\xff\xff\x03\x56\xce\x9c\xeb\x01\x00\x00")

func templatesNetworkTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkTf,
		"templates/network.tf",
	)
}

func templatesNetworkTf() (*asset, error) {
	bytes, err := templatesNetworkTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network.tf", size: 491, mode: os.FileMode(420), modTime: time.Unix(1506988422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetwork_security_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\xcd\x8e\xda\x30\x10\x80\xef\x7e\x8a\x91\xd5\xd3\x4a\xa0\x6d\x36\x59\x71\xd9\x43\x8f\xbd\xf7\x1e\x19\x7b\x12\xac\x06\x4f\x34\x76\xd8\xb6\xab\xbc\x7b\xe5\x84\xac\x80\x86\xd2\xa0\xb6\x52\x10\x5c\xf9\xe6\xcf\xf3\x69\x14\x46\x4f\x0d\x6b\x04\xa9\x7e\x34\x8c\xbc\xcd\x1d\x86\x57\xe2\xaf\xb9\x47\xdd\xb0\x0d\xdf\xf3\x92\xa9\xa9\x25\xc8\x35\xf9\x8d\x84\x37\x01\xe0\xd4\x16\xe1\xe4\xf7\x02\xf2\xc3\xdb\x4e\xf1\x12\xdd\x2e\xb7\xa6\x5d\x74\xb8\x00\xa8\x48\xab\x60\xc9\x8d\xc2\xc3\x9f\x6d\x24\x87\x5e\xfa\x8a\x79\x57\xa5\x23\x87\xd6\x8e\x81\x65\xac\xb0\x8c\x54\x2b\x85\x00\x08\xaa\xf4\x5d\x7b\x00\xe8\x76\x96\xc9\x6d\xd1\x85\x5f\x1a\x8b\x95\x5a\xd1\x0a\x31\x61\x74\x5d\x4c\x18\x5c\x17\x73\x1f\x9b\x9b\x0a\x25\x48\xff\xbb\x7d\x9f\x9b\xde\xf7\x5b\xaf\xd9\x52\xcc\x35\x1a\x92\x3c\x3e\x0a\x00\x63\x19\xf5\xe9\x13\xbd\x67\xfd\xec\xd6\xd4\x38\x13\x73\x29\xad\xd1\xfb\x73\xe5\x3f\x55\x15\xbd\xf6\x25\x29\x90\xa6\x6a\x1c\xfb\xa2\xeb\x08\xed\x5f\xb2\x26\x0e\x39\x2b\x57\xe2\x11\xf4\x10\x11\x83\x3e\x58\xd7\xed\xe7\x94\x7b\x01\x99\x24\x07\x69\x94\x31\x8c\xde\xe7\x35\x63\x61\xbf\x9d\x4f\x73\xc2\x0d\xc8\xd8\xe6\x8f\x1e\xf6\x0f\x0c\x00\x18\xb7\x76\xc4\xa3\x71\xf0\x28\xdb\x24\x3f\x62\xe0\x42\x95\xe8\xc2\x74\x4d\x0e\x62\x2f\xdb\xf2\x71\xb6\xb6\x3c\xaf\x9e\x57\x77\x5f\x0e\x7d\xe9\xf7\x48\x7c\xa5\x32\xef\xe1\x97\xad\x49\x66\x6b\x4d\x92\x65\x59\x76\xd7\x66\xaf\x8d\x71\x7e\xba\x2c\x31\xe8\xb2\x22\x4f\xff\x5d\x91\x87\xbf\x22\x48\xf6\x74\xb7\x63\x6f\x87\x66\x34\x9b\x66\x3d\xdd\x90\x21\xf0\xb2\x25\xe9\x6c\x0f\xc9\x6a\x95\xa6\x77\x53\x06\x53\x8a\xc5\x26\x84\xfa\x9f\x1d\x93\xf9\x7e\xa5\xa4\xe9\xcd\xdd\x13\x5d\x5c\xeb\x48\x45\xe5\x15\xc7\xa4\x8f\xbb\xe5\x8f\x92\xf4\xc6\x2d\xf9\x19\x00\x00\xff\xff\xc3\x49\xda\x6d\x0a\x11\x00\x00")

func templatesNetwork_security_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetwork_security_groupTf,
		"templates/network_security_group.tf",
	)
}

func templatesNetwork_security_groupTf() (*asset, error) {
	bytes, err := templatesNetwork_security_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network_security_group.tf", size: 4362, mode: os.FileMode(420), modTime: time.Unix(1507153563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutputTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xcf\x6a\xf3\x30\x10\xc4\xcf\x9f\x9f\x42\x98\xef\xec\x40\xc0\x97\x40\x9f\x65\x91\xed\x4d\xa2\x46\x96\xc4\xfe\x71\x93\x86\xbc\x7b\x31\xae\x43\x44\x5a\x3b\xbd\x6a\x67\x7e\x33\x8c\xa2\x4a\x52\x31\x65\x13\xf9\x08\x01\xe5\x23\xd2\x09\x82\xed\xb1\x34\xd7\xc2\x18\x63\x06\xeb\x15\xcd\x9b\x29\xff\x5f\xed\xa7\x12\x52\x0f\x83\x23\x51\xeb\x67\x79\x35\x7a\xab\xd1\x73\x2b\x8b\x5b\x51\x64\x48\xd6\x26\xa0\xac\x11\x27\xd5\x22\x88\x90\xa3\x52\x8b\x70\xa0\xa8\x69\x0d\x98\xab\x97\x1b\x4a\x24\x7b\x40\xb0\x6d\x1b\x35\xac\x57\xcd\xe5\x8b\xe8\x0e\xf7\x56\xbd\x00\x63\xab\xe4\xe4\x32\xb5\x59\x80\xcf\x1f\x90\x1b\x7e\xcb\xc0\xb3\x20\x05\xeb\xc1\x2d\x31\x93\x36\xde\xb5\xe0\xbe\x31\x2e\x81\xed\x3a\x42\xe6\x1c\xd6\x39\xc2\x56\x22\xcd\xd7\x91\xf8\xef\x8e\x3b\x8a\x24\xde\x6d\x36\xaf\x60\x77\xdb\xba\xae\xeb\xe7\x35\x86\x9e\x21\x91\x1b\xac\x20\x9c\xf0\x32\x55\x7e\x28\x2c\x3e\xbb\x57\xb3\xa9\x7a\x78\x84\x84\xfd\xad\x2c\x8c\x61\x0c\xec\xc4\x0d\xa3\x57\x48\xf1\xe7\xb4\xa9\xe3\xdf\xc2\xee\x1e\x88\x09\x03\xf3\xf1\x29\x6f\x6f\x3d\x67\x81\xef\xda\xa7\x26\x9e\x41\xc9\xe7\xb3\xbd\x36\xd7\x76\xdc\xea\x2b\x00\x00\xff\xff\xc4\x27\xe0\xd1\x89\x03\x00\x00")

func templatesOutputTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutputTf,
		"templates/output.tf",
	)
}

func templatesOutputTf() (*asset, error) {
	bytes, err := templatesOutputTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output.tf", size: 905, mode: os.FileMode(420), modTime: time.Unix(1506988422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResource_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x6a\xc5\x30\x0c\x44\xf7\x3e\xc5\x60\xba\x6d\x6e\xd0\xb3\x18\xc5\x11\xa9\x21\xb1\x83\x6c\x67\xd1\xe0\xbb\x17\x1b\xd2\x26\x24\xff\x7f\xf8\x5a\x8a\xd1\x68\xe6\x09\xc7\x90\xc5\x32\x34\xfd\x64\x61\x99\xcd\xbe\x31\xa3\x84\xbc\x68\xe8\x3e\xc4\x6f\x8d\x4d\x01\x9e\x66\x46\x9d\x2f\xe8\x8f\x6d\x25\xe9\xd8\xaf\xc6\x0d\xe5\xb3\x69\x14\x30\x05\x4b\xc9\x05\xff\xaf\xd8\x37\x45\x2b\x05\x24\x1a\x63\xb3\x02\xd8\xaf\x4e\x82\x9f\xd9\xa7\x8b\x5f\xb5\x2a\xaa\x28\x75\x8d\xb7\xe4\x7e\x72\xd6\xb8\x07\xc9\xee\xe6\x75\xda\xa7\x57\x87\x06\xc0\x99\x8e\x39\xff\x6d\x27\xf7\x1c\xbb\xfa\xb3\xab\xf2\x66\xf3\xd7\xc2\xd0\x30\x08\xc7\x68\x68\x3a\xb2\x8b\x89\x92\xb3\xef\x20\xfb\x0d\x00\x00\xff\xff\xe9\x3c\x7f\x17\xd1\x01\x00\x00")

func templatesResource_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResource_groupTf,
		"templates/resource_group.tf",
	)
}

func templatesResource_groupTf() (*asset, error) {
	bytes, err := templatesResource_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resource_group.tf", size: 465, mode: os.FileMode(420), modTime: time.Unix(1506988422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStorageTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x6e\x83\x40\x0c\x45\xf7\x73\x0a\x6b\xd4\x75\x6e\xd0\x75\xf7\xcd\x01\x46\x66\xb0\xe8\x48\x60\x23\xdb\x50\xb5\x11\x77\xaf\x18\x05\xda\x20\x45\xc9\xb2\x6c\xf9\xfe\x7e\xcf\xa3\x64\x32\x69\x26\x88\xf8\x3d\x29\xe9\x90\xcc\x45\xb1\xa3\x84\x39\xcb\xc4\x1e\x21\x36\x62\x1f\x11\x2e\x01\x80\x71\x20\x38\x7c\xaf\x10\x5f\x2e\x33\xea\xc9\xca\x30\xf6\x94\x88\xe7\x54\xda\x25\x06\x80\xad\x3c\x75\x2a\xd3\x98\xea\x74\x8d\x6f\xbb\x6e\x03\xa7\x75\xd1\x69\x4d\x2d\x31\x04\x80\x5e\x32\x7a\x11\xde\xd6\x7c\x92\xf9\x64\x6b\xf1\x95\x2d\xf9\xd7\x58\x1b\xcf\x8e\xdc\xa2\xb6\xe9\xed\xfd\x5c\x47\x1d\x3b\xab\xc4\x00\xc4\x73\x51\xe1\x81\xd8\x7f\x59\xff\x40\x2e\x61\x09\xe1\xfe\x19\xb2\xb0\x63\x61\xd2\x87\x87\xa8\x8c\x35\x72\x47\x1d\x9e\x96\x07\x38\xbc\xc2\xb5\xe0\x66\xfe\x10\x39\x14\xec\xdc\xeb\x7f\x32\xdb\x6f\x35\x6a\x99\xd1\x29\x3e\xaf\x6d\x4e\x43\xa6\xbe\x7f\xa0\xbe\xc7\xfe\xb5\x7e\xd3\x4b\xb3\xba\xff\x04\x00\x00\xff\xff\xcf\x0a\x89\xf7\xf9\x02\x00\x00")

func templatesStorageTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesStorageTf,
		"templates/storage.tf",
	)
}

func templatesStorageTf() (*asset, error) {
	bytes, err := templatesStorageTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/storage.tf", size: 761, mode: os.FileMode(420), modTime: time.Unix(1506988422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTlsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4a\x2d\xce\x2f\x2d\x4a\x4e\x55\x50\x2a\xc9\x29\x8e\x2f\x28\xca\x2c\x4b\x2c\x49\x8d\xcf\x4e\xad\x54\x52\x50\x4a\xca\x2f\xce\x88\x2f\xcb\x2d\x56\x52\xa8\xe6\x52\x50\x48\xcc\x49\xcf\x2f\xca\x2c\xc9\xc8\x55\xb0\x55\x50\x0a\x0a\x76\x54\xe2\x52\x50\x28\x2a\x4e\x8c\x4f\xca\x2c\x29\x56\xb0\x55\x30\x31\xb0\x34\xe3\xaa\xe5\x02\x04\x00\x00\xff\xff\x2c\x7a\x83\xa0\x50\x00\x00\x00")

func templatesTlsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesTlsTf,
		"templates/tls.tf",
	)
}

func templatesTlsTf() (*asset, error) {
	bytes, err := templatesTlsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tls.tf", size: 80, mode: os.FileMode(420), modTime: time.Unix(1506988422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xd1\xaa\xc2\x30\x0c\x06\xe0\xeb\xd3\xa7\x08\xe5\x5c\xfb\x06\x3e\xcb\xc8\xba\x20\x81\xae\x2b\x69\x56\xd0\xb1\x77\x97\x3a\xa9\x32\x15\x6b\x6e\xff\x2f\xe1\x4f\x46\x61\xec\x3d\x81\xa5\x90\x3b\x1e\x2c\x2c\xe6\x4f\xcf\x91\xe0\x08\x36\xa9\x70\x38\x59\xb3\x1a\xf3\x70\x7e\x72\xa8\x3c\x85\xef\x32\xf1\x18\x3d\x75\xad\x87\xd3\xdc\x27\x27\x1c\xcb\xf1\xa6\x05\xa5\x80\x41\x9b\xa8\xf3\x4c\xbf\xd1\x44\x4e\x48\x3f\xf1\x28\x53\xe6\x81\x04\x2c\x5e\x66\x21\x19\x0b\x04\xd8\xbd\x00\x65\xeb\x7f\xc9\x28\x87\x5d\xb2\x5a\x03\x50\xfb\xc3\x7d\xaa\xae\xc9\xcd\xd5\xf2\x2f\xae\x26\xcf\x6e\x6b\xfe\xce\x6d\xc9\x5a\x3e\xb8\x06\x00\x00\xff\xff\xb7\xcd\x6b\x24\xf8\x01\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 504, mode: os.FileMode(420), modTime: time.Unix(1506988422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/network.tf": templatesNetworkTf,
	"templates/network_security_group.tf": templatesNetwork_security_groupTf,
	"templates/output.tf": templatesOutputTf,
	"templates/resource_group.tf": templatesResource_groupTf,
	"templates/storage.tf": templatesStorageTf,
	"templates/tls.tf": templatesTlsTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"network.tf": &bintree{templatesNetworkTf, map[string]*bintree{}},
		"network_security_group.tf": &bintree{templatesNetwork_security_groupTf, map[string]*bintree{}},
		"output.tf": &bintree{templatesOutputTf, map[string]*bintree{}},
		"resource_group.tf": &bintree{templatesResource_groupTf, map[string]*bintree{}},
		"storage.tf": &bintree{templatesStorageTf, map[string]*bintree{}},
		"tls.tf": &bintree{templatesTlsTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

